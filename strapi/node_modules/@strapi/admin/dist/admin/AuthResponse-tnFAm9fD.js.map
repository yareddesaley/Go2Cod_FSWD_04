{"version":3,"file":"AuthResponse-tnFAm9fD.js","sources":["../../ee/admin/src/utils/cookies.ts","../../ee/admin/src/pages/AuthResponse.tsx"],"sourcesContent":["export const getCookieValue = (name: string) => {\n  let result = null;\n  const cookieArray = document.cookie.split(';');\n  cookieArray.forEach((cookie) => {\n    const [key, value] = cookie.split('=').map((item) => item.trim());\n    if (key.trim() === name) {\n      result = decodeURIComponent(value);\n    }\n  });\n  return result;\n};\n\nexport const deleteCookie = (name: string) => {\n  // Set the cookie to expire in the past\n  document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n};\n","import * as React from 'react';\n\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useMatch } from 'react-router-dom';\n\nimport { Page } from '../../../../admin/src/components/PageHelpers';\nimport { useTypedDispatch } from '../../../../admin/src/core/store/hooks';\nimport { login } from '../../../../admin/src/reducer';\nimport { getCookieValue, deleteCookie } from '../utils/cookies';\n\nconst AuthResponse = () => {\n  const match = useMatch('/auth/login/:authResponse');\n  const { formatMessage } = useIntl();\n  const navigate = useNavigate();\n  const dispatch = useTypedDispatch();\n\n  const redirectToOops = React.useCallback(() => {\n    navigate({\n      pathname: '/auth/oops',\n      search: `?info=${encodeURIComponent(\n        formatMessage({\n          id: 'Auth.form.button.login.providers.error',\n          defaultMessage: 'We cannot connect you through the selected provider.',\n        })\n      )}`,\n    });\n  }, [navigate, formatMessage]);\n\n  React.useEffect(() => {\n    if (match?.params.authResponse === 'error') {\n      redirectToOops();\n    }\n\n    if (match?.params.authResponse === 'success') {\n      const jwtToken = getCookieValue('jwtToken');\n\n      if (jwtToken) {\n        dispatch(\n          login({\n            token: jwtToken,\n          })\n        );\n\n        deleteCookie('jwtToken');\n\n        navigate('/auth/login');\n      } else {\n        redirectToOops();\n      }\n    }\n  }, [dispatch, match, redirectToOops, navigate]);\n\n  return <Page.Loading />;\n};\n\nexport { AuthResponse };\n"],"names":["useMatch","useIntl","useNavigate","useTypedDispatch","React","login","jsx","Page"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAa,MAAA,cAAA,GAAiB,CAAC,IAAiB,KAAA;AAC9C,EAAA,IAAI,MAAS,GAAA,IAAA,CAAA;AACb,EAAA,MAAM,WAAc,GAAA,QAAA,CAAS,MAAO,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA;AAC7C,EAAY,WAAA,CAAA,OAAA,CAAQ,CAAC,MAAW,KAAA;AAC9B,IAAA,MAAM,CAAC,GAAA,EAAK,KAAK,CAAA,GAAI,MAAO,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,GAAI,CAAA,CAAC,IAAS,KAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAChE,IAAI,IAAA,GAAA,CAAI,IAAK,EAAA,KAAM,IAAM,EAAA;AACvB,MAAA,MAAA,GAAS,mBAAmB,KAAK,CAAA,CAAA;AAAA,KACnC;AAAA,GACD,CAAA,CAAA;AACD,EAAO,OAAA,MAAA,CAAA;AACT,CAAA,CAAA;AAEa,MAAA,YAAA,GAAe,CAAC,IAAiB,KAAA;AAE5C,EAAA,QAAA,CAAS,SAAS,IAAO,GAAA,mDAAA,CAAA;AAC3B,CAAA;;ACLA,MAAM,eAAe,MAAM;AACzB,EAAM,MAAA,KAAA,GAAQA,wBAAS,2BAA2B,CAAA,CAAA;AAClD,EAAM,MAAA,EAAE,aAAc,EAAA,GAAIC,iBAAQ,EAAA,CAAA;AAClC,EAAA,MAAM,WAAWC,0BAAY,EAAA,CAAA;AAC7B,EAAA,MAAM,WAAWC,sBAAiB,EAAA,CAAA;AAElC,EAAM,MAAA,cAAA,GAAiBC,gBAAM,CAAA,WAAA,CAAY,MAAM;AAC7C,IAAS,QAAA,CAAA;AAAA,MACP,QAAU,EAAA,YAAA;AAAA,MACV,QAAQ,CAAS,MAAA,EAAA,kBAAA;AAAA,QACf,aAAc,CAAA;AAAA,UACZ,EAAI,EAAA,wCAAA;AAAA,UACJ,cAAgB,EAAA,sDAAA;AAAA,SACjB,CAAA;AAAA,OACF,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AAAA,GACA,EAAA,CAAC,QAAU,EAAA,aAAa,CAAC,CAAA,CAAA;AAE5B,EAAAA,gBAAA,CAAM,UAAU,MAAM;AACpB,IAAI,IAAA,KAAA,EAAO,MAAO,CAAA,YAAA,KAAiB,OAAS,EAAA;AAC1C,MAAe,cAAA,EAAA,CAAA;AAAA,KACjB;AAEA,IAAI,IAAA,KAAA,EAAO,MAAO,CAAA,YAAA,KAAiB,SAAW,EAAA;AAC5C,MAAM,MAAA,QAAA,GAAW,eAAe,UAAU,CAAA,CAAA;AAE1C,MAAA,IAAI,QAAU,EAAA;AACZ,QAAA,QAAA;AAAA,UACEC,WAAM,CAAA;AAAA,YACJ,KAAO,EAAA,QAAA;AAAA,WACR,CAAA;AAAA,SACH,CAAA;AAEA,QAAA,YAAA,CAAa,UAAU,CAAA,CAAA;AAEvB,QAAA,QAAA,CAAS,aAAa,CAAA,CAAA;AAAA,OACjB,MAAA;AACL,QAAe,cAAA,EAAA,CAAA;AAAA,OACjB;AAAA,KACF;AAAA,KACC,CAAC,QAAA,EAAU,KAAO,EAAA,cAAA,EAAgB,QAAQ,CAAC,CAAA,CAAA;AAE9C,EAAO,uBAAAC,cAAA,CAACC,UAAK,CAAA,OAAA,EAAL,EAAa,CAAA,CAAA;AACvB;;;;"}