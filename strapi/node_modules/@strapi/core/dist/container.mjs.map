{"version":3,"file":"container.mjs","sources":["../src/container.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\n\nexport class Container implements Core.Container {\n  private registerMap = new Map<string, unknown>();\n\n  private serviceMap = new Map();\n\n  add(name: string, resolver: unknown) {\n    if (this.registerMap.has(name)) {\n      throw new Error(`Cannot register already registered service ${name}`);\n    }\n\n    this.registerMap.set(name, resolver);\n    return this;\n  }\n\n  get(name: string, args?: unknown) {\n    // TODO: handle singleton vs instantiation everytime\n    if (this.serviceMap.has(name)) {\n      return this.serviceMap.get(name);\n    }\n\n    if (this.registerMap.has(name)) {\n      const resolver = this.registerMap.get(name);\n\n      if (typeof resolver === 'function') {\n        this.serviceMap.set(name, resolver(this, args));\n      } else {\n        this.serviceMap.set(name, resolver);\n      }\n\n      return this.serviceMap.get(name);\n    }\n\n    throw new Error(`Could not resolve service ${name}`);\n  }\n}\n"],"names":[],"mappings":"AAEO,MAAM,UAAoC;AAAA,EACvC,kCAAkB;EAElB,iCAAiB;EAEzB,IAAI,MAAc,UAAmB;AACnC,QAAI,KAAK,YAAY,IAAI,IAAI,GAAG;AAC9B,YAAM,IAAI,MAAM,8CAA8C,IAAI,EAAE;AAAA,IACtE;AAEK,SAAA,YAAY,IAAI,MAAM,QAAQ;AAC5B,WAAA;AAAA,EACT;AAAA,EAEA,IAAI,MAAc,MAAgB;AAEhC,QAAI,KAAK,WAAW,IAAI,IAAI,GAAG;AACtB,aAAA,KAAK,WAAW,IAAI,IAAI;AAAA,IACjC;AAEA,QAAI,KAAK,YAAY,IAAI,IAAI,GAAG;AAC9B,YAAM,WAAW,KAAK,YAAY,IAAI,IAAI;AAEtC,UAAA,OAAO,aAAa,YAAY;AAClC,aAAK,WAAW,IAAI,MAAM,SAAS,MAAM,IAAI,CAAC;AAAA,MAAA,OACzC;AACA,aAAA,WAAW,IAAI,MAAM,QAAQ;AAAA,MACpC;AAEO,aAAA,KAAK,WAAW,IAAI,IAAI;AAAA,IACjC;AAEA,UAAM,IAAI,MAAM,6BAA6B,IAAI,EAAE;AAAA,EACrD;AACF;"}