{"version":3,"file":"index-DQbVUsE_.js","sources":["../../admin/src/pluginId.ts","../../admin/src/components/Initializer.tsx","../../admin/src/utils/prefixPluginTranslations.ts","../../admin/src/index.ts"],"sourcesContent":["export const pluginId = 'cloud';\n","/**\n *\n * Initializer\n *\n */\n\nimport { useEffect, useRef } from 'react';\n\nimport { pluginId } from '../pluginId';\n\ntype InitializerProps = {\n  setPlugin: (id: string) => void;\n};\n\nconst Initializer = ({ setPlugin }: InitializerProps) => {\n  const ref = useRef(setPlugin);\n\n  useEffect(() => {\n    ref.current(pluginId);\n  }, []);\n\n  return null;\n};\n\nexport { Initializer };\n","type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nexport { prefixPluginTranslations };\n","/* eslint-disable check-file/filename-naming-convention */\n\nimport { Cloud } from '@strapi/icons';\n\nimport { Initializer } from './components/Initializer';\nimport { pluginId } from './pluginId';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\n\nconst name = 'Deploy';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  register(app: any) {\n    const { backendURL } = window.strapi;\n\n    // Only add the plugin menu link and registering it if the project is on development (localhost).\n    if (backendURL?.includes('localhost')) {\n      app.addMenuLink({\n        to: `plugins/${pluginId}`,\n        icon: Cloud,\n        intlLabel: {\n          id: `${pluginId}.plugin.name`,\n          defaultMessage: name,\n        },\n        Component: async () => {\n          const { App } = await import('./pages/App');\n\n          return App;\n        },\n      });\n      const plugin = {\n        id: pluginId,\n        initializer: Initializer,\n        isReady: false,\n        name,\n      };\n\n      app.registerPlugin(plugin);\n    }\n  },\n\n  async registerTrads(app: any) {\n    const { locales } = app;\n\n    const importedTrads = await Promise.all(\n      (locales as any[]).map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n"],"names":["useRef","useEffect","pluginId","Cloud"],"mappings":";;;;;;;;;;;;AAAO,MAAM,WAAW;ACcxB,MAAM,cAAc,CAAC,EAAE,gBAAkC;AACjD,QAAA,MAAMA,aAAO,SAAS;AAE5BC,QAAAA,UAAU,MAAM;AACd,QAAI,QAAQ,QAAQ;AAAA,EACtB,GAAG,CAAE,CAAA;AAEE,SAAA;AACT;ACpBA,MAAM,2BAA2B,CAAC,MAAmBC,cAAkC;AAIrF,SAAO,OAAO,KAAK,IAAI,EAAE,OAAO,CAAC,KAAK,YAAY;AAChD,QAAI,GAAGA,SAAQ,IAAI,OAAO,EAAE,IAAI,KAAK,OAAO;AACrC,WAAA;AAAA,EACT,GAAG,CAAiB,CAAA;AACtB;ACFA,MAAM,OAAO;AAGb,MAAe,QAAA;AAAA,EACb,SAAS,KAAU;AACX,UAAA,EAAE,WAAW,IAAI,OAAO;AAG1B,QAAA,YAAY,SAAS,WAAW,GAAG;AACrC,UAAI,YAAY;AAAA,QACd,IAAI,WAAW,QAAQ;AAAA,QACvB,MAAMC,MAAA;AAAA,QACN,WAAW;AAAA,UACT,IAAI,GAAG,QAAQ;AAAA,UACf,gBAAgB;AAAA,QAClB;AAAA,QACA,WAAW,YAAY;AACrB,gBAAM,EAAE,IAAA,IAAQ,MAAM,QAAA,QAAA,EAAA,KAAA,MAAA,QAAO,mBAAa,CAAA;AAEnC,iBAAA;AAAA,QACT;AAAA,MAAA,CACD;AACD,YAAM,SAAS;AAAA,QACb,IAAI;AAAA,QACJ,aAAa;AAAA,QACb,SAAS;AAAA,QACT;AAAA,MAAA;AAGF,UAAI,eAAe,MAAM;AAAA,IAC3B;AAAA,EACF;AAAA,EAEA,MAAM,cAAc,KAAU;AACtB,UAAA,EAAE,QAAY,IAAA;AAEd,UAAA,gBAAgB,MAAM,QAAQ;AAAA,MACjC,QAAkB,IAAI,CAAC,WAAW;AAC1B,eAAA,qCAA+B,uBAAA,OAAA,EAAA,0BAAA,MAAA,qCAAA,kBAAA,CAAA,GAAA,0BAAA,MAAA,QAAA,QAAA,EAAA,KAAA,MAAA,QAAA,kBAAA,CAAA,EAAA,CAAA,GAAA,kBAAA,MAAA,OAAA,EACnC,KAAK,CAAC,EAAE,SAAS,WAAW;AACpB,iBAAA;AAAA,YACL,MAAM,yBAAyB,MAAM,QAAQ;AAAA,YAC7C;AAAA,UAAA;AAAA,QACF,CACD,EACA,MAAM,MAAM;AACJ,iBAAA;AAAA,YACL,MAAM,CAAC;AAAA,YACP;AAAA,UAAA;AAAA,QACF,CACD;AAAA,MAAA,CACJ;AAAA,IAAA;AAGI,WAAA,QAAQ,QAAQ,aAAa;AAAA,EACtC;AACF;;;"}