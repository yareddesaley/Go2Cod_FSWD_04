{
  "version": 3,
  "sources": ["../../../@strapi/i18n/admin/src/pluginId.ts", "../../../@strapi/i18n/admin/src/utils/getTranslation.ts", "../../../@strapi/i18n/admin/src/components/CheckboxConfirmation.tsx", "../../../@strapi/i18n/admin/src/utils/fields.ts", "../../../@strapi/i18n/admin/src/utils/strings.ts", "../../../@strapi/i18n/admin/src/hooks/useI18n.ts", "../../../@strapi/i18n/admin/src/services/api.ts", "../../../@strapi/i18n/admin/src/services/locales.ts", "../../../@strapi/i18n/admin/src/services/relations.ts", "../../../@strapi/i18n/admin/src/utils/clean.ts", "../../../@strapi/i18n/admin/src/components/BulkLocaleActionModal.tsx", "../../../@strapi/i18n/admin/src/components/CMHeaderActions.tsx", "../../../@strapi/i18n/admin/src/components/CMListViewModalsAdditionalInformation.tsx", "../../../@strapi/i18n/admin/src/components/LocalePicker.tsx", "../../../@strapi/i18n/admin/src/constants.ts", "../../../@strapi/i18n/admin/src/contentManagerHooks/editView.tsx", "../../../@strapi/i18n/admin/src/components/LocaleListCell.tsx", "../../../@strapi/i18n/admin/src/contentManagerHooks/listView.tsx", "../../../@strapi/i18n/admin/src/contentReleasesHooks/releaseDetailsView.ts", "../../../@strapi/i18n/admin/src/middlewares/extendCTBAttributeInitialData.ts", "../../../@strapi/i18n/admin/src/middlewares/extendCTBInitialData.ts", "../../../@strapi/i18n/admin/src/middlewares/rbac-middleware.ts", "../../../@strapi/i18n/admin/src/utils/prefixPluginTranslations.ts", "../../../@strapi/i18n/admin/src/utils/schemas.ts", "../../../@strapi/i18n/admin/src/index.ts"],
  "sourcesContent": ["export const pluginId = 'i18n';\n", "import { pluginId } from '../pluginId';\n\nconst getTranslation = (id: string) => `${pluginId}.${id}`;\n\nexport { getTranslation };\n", "import * as React from 'react';\n\nimport { Button, Checkbox, Dialog, Field, Flex, Typography } from '@strapi/design-system';\nimport { WarningCircle } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { getTranslation } from '../utils/getTranslation';\n\nconst TextAlignTypography = styled(Typography)`\n  text-align: center;\n`;\n\ninterface IntlMessage extends MessageDescriptor {\n  values: object;\n}\n\ninterface CheckboxConfirmationProps {\n  description: IntlMessage;\n  intlLabel: IntlMessage;\n  isCreating?: boolean;\n  name: string;\n  onChange: (event: { target: { name: string; value: boolean; type: string } }) => void;\n  value: boolean;\n}\n\nconst CheckboxConfirmation = ({\n  description,\n  isCreating = false,\n  intlLabel,\n  name,\n  onChange,\n  value,\n}: CheckboxConfirmationProps) => {\n  const { formatMessage } = useIntl();\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const handleChange = (value: boolean) => {\n    if (isCreating || value) {\n      return onChange({ target: { name, value, type: 'checkbox' } });\n    }\n\n    if (!value) {\n      return setIsOpen(true);\n    }\n\n    return null;\n  };\n\n  const handleConfirm = () => {\n    onChange({ target: { name, value: false, type: 'checkbox' } });\n  };\n\n  const label = intlLabel.id\n    ? formatMessage(\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\n        { ...intlLabel.values }\n      )\n    : name;\n\n  const hint = description\n    ? formatMessage(\n        { id: description.id, defaultMessage: description.defaultMessage },\n        { ...description.values }\n      )\n    : '';\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={setIsOpen}>\n      <Field.Root hint={hint} name={name}>\n        <Checkbox onCheckedChange={handleChange} checked={value}>\n          {label}\n        </Checkbox>\n        <Field.Hint />\n      </Field.Root>\n      <Dialog.Content>\n        <Dialog.Header>\n          {formatMessage({\n            id: getTranslation('CheckboxConfirmation.Modal.title'),\n            defaultMessage: 'Disable localization',\n          })}\n        </Dialog.Header>\n        <Dialog.Body icon={<WarningCircle />}>\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n            <Flex justifyContent=\"center\">\n              <TextAlignTypography>\n                {formatMessage({\n                  id: getTranslation('CheckboxConfirmation.Modal.content'),\n                  defaultMessage:\n                    'Disabling localization will engender the deletion of all your content but the one associated to your default locale (if existing).',\n                })}\n              </TextAlignTypography>\n            </Flex>\n            <Flex justifyContent=\"center\">\n              <Typography fontWeight=\"semiBold\">\n                {formatMessage({\n                  id: getTranslation('CheckboxConfirmation.Modal.body'),\n                  defaultMessage: 'Do you want to disable it?',\n                })}\n              </Typography>\n            </Flex>\n          </Flex>\n        </Dialog.Body>\n        <Dialog.Footer>\n          <Dialog.Cancel>\n            <Button variant=\"tertiary\">\n              {formatMessage({\n                id: 'components.popUpWarning.button.cancel',\n                defaultMessage: 'No, cancel',\n              })}\n            </Button>\n          </Dialog.Cancel>\n          <Dialog.Action>\n            <Button variant=\"danger-light\" onClick={handleConfirm}>\n              {formatMessage({\n                id: getTranslation('CheckboxConfirmation.Modal.button-confirm'),\n                defaultMessage: 'Yes, disable',\n              })}\n            </Button>\n          </Dialog.Action>\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\nexport { CheckboxConfirmation };\n", "const LOCALIZED_FIELDS = [\n  'biginteger',\n  'boolean',\n  'component',\n  'date',\n  'datetime',\n  'decimal',\n  'dynamiczone',\n  'email',\n  'enumeration',\n  'float',\n  'integer',\n  'json',\n  'media',\n  'number',\n  'password',\n  'richtext',\n  'blocks',\n  'string',\n  'text',\n  'time',\n];\n\nconst doesPluginOptionsHaveI18nLocalized = (\n  opts?: object\n): opts is { i18n: { localized: boolean } } =>\n  typeof opts === 'object' &&\n  opts !== null &&\n  'i18n' in opts &&\n  typeof opts.i18n === 'object' &&\n  opts.i18n !== null &&\n  'localized' in opts.i18n &&\n  typeof opts.i18n.localized === 'boolean';\n\nexport { LOCALIZED_FIELDS, doesPluginOptionsHaveI18nLocalized };\n", "const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport { capitalize };\n", "import * as React from 'react';\n\nimport { useAuth } from '@strapi/admin/strapi-admin';\nimport { unstable_useDocument as useDocument } from '@strapi/content-manager/strapi-admin';\nimport { useParams } from 'react-router-dom';\n\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\nimport { capitalize } from '../utils/strings';\n\ntype UseI18n = () => {\n  hasI18n: boolean;\n  canCreate: string[];\n  canRead: string[];\n  canUpdate: string[];\n  canDelete: string[];\n  canPublish: string[];\n};\n\n/**\n * @alpha\n * @description This hook is used to get the i18n status of a content type.\n * Also returns the CRUDP permission locale properties for the content type\n * so we know which locales the user can perform actions on.\n */\nconst useI18n: UseI18n = () => {\n  // Extract the params from the URL to pass to our useDocument hook\n  const params = useParams<{ collectionType: string; slug: string; model: string }>();\n\n  const userPermissions = useAuth('useI18n', (state) => state.permissions);\n  const actions = React.useMemo(() => {\n    const permissions = userPermissions.filter((permission) => permission.subject === params.slug);\n\n    return permissions.reduce<Omit<ReturnType<UseI18n>, 'hasI18n'>>(\n      (acc, permission) => {\n        const [actionShorthand] = permission.action.split('.').slice(-1);\n\n        return {\n          ...acc,\n          [`can${capitalize(actionShorthand)}`]: permission.properties?.locales ?? [],\n        };\n      },\n      { canCreate: [], canRead: [], canUpdate: [], canDelete: [], canPublish: [] }\n    );\n  }, [params.slug, userPermissions]);\n\n  // TODO: use specific hook to get schema only\n  const { schema } = useDocument(\n    {\n      // We can non-null assert these because below we skip the query if they are not present\n      collectionType: params.collectionType!,\n      model: params.slug!,\n    },\n    {\n      skip: true,\n    }\n  );\n\n  if (doesPluginOptionsHaveI18nLocalized(schema?.pluginOptions)) {\n    return {\n      hasI18n: schema.pluginOptions.i18n.localized,\n      ...actions,\n    };\n  }\n\n  return {\n    hasI18n: false,\n    ...actions,\n  };\n};\n\nexport { useI18n };\n", "import { adminApi } from '@strapi/admin/strapi-admin';\n\nconst i18nApi = adminApi.enhanceEndpoints({\n  addTagTypes: ['Locale'],\n});\n\nexport { i18nApi };\n", "import { i18nApi } from './api';\n\nimport type { GetISOLocales } from '../../../shared/contracts/iso-locales';\nimport type {\n  GetLocales,\n  CreateLocale,\n  DeleteLocale,\n  UpdateLocale,\n} from '../../../shared/contracts/locales';\n\nconst localesApi = i18nApi.injectEndpoints({\n  endpoints: (builder) => ({\n    createLocale: builder.mutation<CreateLocale.Response, CreateLocale.Request['body']>({\n      query: (data) => ({\n        url: '/i18n/locales',\n        method: 'POST',\n        data,\n      }),\n      invalidatesTags: [{ type: 'Locale', id: 'LIST' }],\n    }),\n    deleteLocale: builder.mutation<DeleteLocale.Response, DeleteLocale.Params['id']>({\n      query: (id) => ({\n        url: `/i18n/locales/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: (result, error, id) => [{ type: 'Locale', id }],\n    }),\n    getLocales: builder.query<GetLocales.Response, void>({\n      query: () => '/i18n/locales',\n      providesTags: (res) => [\n        { type: 'Locale', id: 'LIST' },\n        ...(Array.isArray(res)\n          ? res.map((locale) => ({\n              type: 'Locale' as const,\n              id: locale.id,\n            }))\n          : []),\n      ],\n    }),\n    getDefaultLocales: builder.query<GetISOLocales.Response, void>({\n      query: () => '/i18n/iso-locales',\n    }),\n    updateLocale: builder.mutation<\n      UpdateLocale.Response,\n      UpdateLocale.Request['body'] & UpdateLocale.Params\n    >({\n      query: ({ id, ...data }) => ({\n        url: `/i18n/locales/${id}`,\n        method: 'PUT',\n        data,\n      }),\n      invalidatesTags: (result, error, { id }) => [{ type: 'Locale', id }],\n    }),\n  }),\n});\n\nconst {\n  useCreateLocaleMutation,\n  useDeleteLocaleMutation,\n  useGetLocalesQuery,\n  useGetDefaultLocalesQuery,\n  useUpdateLocaleMutation,\n} = localesApi;\n\nexport {\n  useCreateLocaleMutation,\n  useDeleteLocaleMutation,\n  useGetLocalesQuery,\n  useGetDefaultLocalesQuery,\n  useUpdateLocaleMutation,\n};\n", "import { i18nApi } from './api';\n\nimport type { CountManyEntriesDraftRelations } from '../../../shared/contracts/content-manager';\n\nconst relationsApi = i18nApi.injectEndpoints({\n  overrideExisting: true,\n  endpoints: (builder) => ({\n    getManyDraftRelationCount: builder.query<\n      CountManyEntriesDraftRelations.Response['data'],\n      CountManyEntriesDraftRelations.Request['query'] & {\n        model: string;\n      }\n    >({\n      query: ({ model, ...params }) => ({\n        url: `/content-manager/collection-types/${model}/actions/countManyEntriesDraftRelations`,\n        method: 'GET',\n        config: {\n          params,\n        },\n      }),\n      transformResponse: (response: CountManyEntriesDraftRelations.Response) => response.data,\n    }),\n  }),\n});\n\nconst { useGetManyDraftRelationCountQuery } = relationsApi;\n\nexport { useGetManyDraftRelationCountQuery };\n", "import type { Schema } from '@strapi/types';\n\ntype Data = Record<keyof Schema.ContentType['attributes'], any>;\n\nconst cleanData = (\n  data: Data,\n  schema: Schema.ContentType,\n  components: Record<string, Schema.Component>\n) => {\n  const cleanedData = removeFields(data, [\n    'createdAt',\n    'createdBy',\n    'updatedAt',\n    'updatedBy',\n    'id',\n    'documentId',\n    'publishedAt',\n    'strapi_stage',\n    'strapi_assignee',\n    'locale',\n    'status',\n  ]);\n\n  const cleanedDataWithoutPasswordAndRelation = recursiveRemoveFieldTypes(\n    cleanedData,\n    schema,\n    components,\n    ['relation', 'password']\n  );\n\n  return cleanedDataWithoutPasswordAndRelation;\n};\n\nconst removeFields = (data: Data, fields: Array<keyof Schema.ContentType['attributes']>) => {\n  return Object.keys(data).reduce((acc, current) => {\n    if (fields.includes(current)) {\n      return acc;\n    }\n    acc[current] = data[current];\n    return acc;\n  }, {} as Data);\n};\n\nconst recursiveRemoveFieldTypes = (\n  data: Data,\n  schema: Schema.Schema,\n  components: Record<string, Schema.Component>,\n  fields: Array<keyof Schema.ContentType['attributes']>\n) => {\n  return Object.keys(data).reduce((acc, current) => {\n    const attribute = schema.attributes[current] ?? { type: undefined };\n\n    if (fields.includes(attribute.type)) {\n      return acc;\n    }\n\n    if (attribute.type === 'dynamiczone') {\n      acc[current] = data[current].map((componentValue: any, index: number) => {\n        const { id: _, ...rest } = recursiveRemoveFieldTypes(\n          componentValue,\n          components[componentValue.__component],\n          components,\n          fields\n        );\n\n        return {\n          ...rest,\n          __temp_key__: index + 1,\n        };\n      });\n    } else if (attribute.type === 'component') {\n      const { repeatable, component } = attribute;\n\n      if (repeatable) {\n        acc[current] = (data[current] ?? []).map((compoData: any, index: number) => {\n          const { id: _, ...rest } = recursiveRemoveFieldTypes(\n            compoData,\n            components[component],\n            components,\n            fields\n          );\n\n          return {\n            ...rest,\n            __temp_key__: index + 1,\n          };\n        });\n      } else {\n        const { id: _, ...rest } = recursiveRemoveFieldTypes(\n          data[current] ?? {},\n          components[component],\n          components,\n          fields\n        );\n\n        acc[current] = rest;\n      }\n    } else {\n      acc[current] = data[current];\n    }\n\n    return acc;\n  }, {} as any);\n};\n\nexport { cleanData };\n", "import * as React from 'react';\n\nimport { FormErrors, Table, useTable } from '@strapi/admin/strapi-admin';\nimport { Box, Typography, IconButton, Flex, Tooltip, Status, Modal } from '@strapi/design-system';\nimport { Pencil, CheckCircle, CrossCircle, ArrowsCounterClockwise } from '@strapi/icons';\nimport { Modules } from '@strapi/types';\nimport { stringify } from 'qs';\nimport { type MessageDescriptor, useIntl, PrimitiveType } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport { Locale } from '../../../shared/contracts/locales';\nimport { getTranslation } from '../utils/getTranslation';\nimport { capitalize } from '../utils/strings';\n\nimport { LocaleStatus } from './CMHeaderActions';\n\ntype Status = Modules.Documents.Params.PublicationStatus.Kind | 'modified';\n\n/* -------------------------------------------------------------------------------------------------\n * EntryValidationText\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EntryValidationTextProps {\n  status: Status;\n  validationErrors: FormErrors[string] | null;\n  action: 'bulk-publish' | 'bulk-unpublish';\n}\n\ninterface TranslationMessage extends MessageDescriptor {\n  values?: Record<string, PrimitiveType>;\n}\n\nconst isErrorMessageDescriptor = (object?: string | object): object is TranslationMessage => {\n  return (\n    typeof object === 'object' && object !== null && 'id' in object && 'defaultMessage' in object\n  );\n};\n\nconst EntryValidationText = ({\n  status = 'draft',\n  validationErrors,\n  action,\n}: EntryValidationTextProps) => {\n  const { formatMessage } = useIntl();\n\n  /**\n   * TODO: Should this be extracted an made into a factory to recursively get\n   * error messages??\n   */\n  const getErrorStr = (key: string, value?: FormErrors[string]): string => {\n    if (typeof value === 'string') {\n      return `${key}: ${value}`;\n    } else if (isErrorMessageDescriptor(value)) {\n      return `${key}: ${formatMessage(value)}`;\n    } else if (Array.isArray(value)) {\n      return value.map((v) => getErrorStr(key, v)).join(' ');\n    } else if (typeof value === 'object' && !Array.isArray(value)) {\n      return Object.entries(value)\n        .map(([k, v]) => getErrorStr(k, v))\n        .join(' ');\n    } else {\n      /**\n       * unlikely to happen, but we need to return something\n       */\n      return '';\n    }\n  };\n\n  if (validationErrors) {\n    const validationErrorsMessages = Object.entries(validationErrors)\n      .map(([key, value]) => {\n        return getErrorStr(key, value);\n      })\n      .join(' ');\n\n    return (\n      <Flex gap={2}>\n        <CrossCircle fill=\"danger600\" />\n        <Tooltip label={validationErrorsMessages}>\n          <Typography\n            maxWidth={'30rem'}\n            textColor=\"danger600\"\n            variant=\"omega\"\n            fontWeight=\"semiBold\"\n            ellipsis\n          >\n            {validationErrorsMessages}\n          </Typography>\n        </Tooltip>\n      </Flex>\n    );\n  }\n\n  const getStatusMessage = () => {\n    if (action === 'bulk-publish') {\n      if (status === 'published') {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'content-manager.bulk-publish.already-published',\n            defaultMessage: 'Already Published',\n          }),\n          textColor: 'success600',\n          fontWeight: 'bold',\n        };\n      } else if (status === 'modified') {\n        return {\n          icon: <ArrowsCounterClockwise fill=\"alternative600\" />,\n          text: formatMessage({\n            id: 'app.utils.ready-to-publish-changes',\n            defaultMessage: 'Ready to publish changes',\n          }),\n        };\n      } else {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'app.utils.ready-to-publish',\n            defaultMessage: 'Ready to publish',\n          }),\n        };\n      }\n    } else {\n      if (status === 'draft') {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'content-manager.bulk-unpublish.already-unpublished',\n            defaultMessage: 'Already Unpublished',\n          }),\n          textColor: 'success600',\n          fontWeight: 'bold',\n        };\n      } else {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'app.utils.ready-to-unpublish-changes',\n            defaultMessage: 'Ready to unpublish',\n          }),\n          textColor: 'success600',\n          fontWeight: 'bold',\n        };\n      }\n    }\n  };\n\n  const { icon, text, textColor = 'success600', fontWeight = 'normal' } = getStatusMessage();\n\n  return (\n    <Flex gap={2}>\n      {icon}\n      <Typography textColor={textColor} fontWeight={fontWeight}>\n        {text}\n      </Typography>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BoldChunk\n * -----------------------------------------------------------------------------------------------*/\n\nconst BoldChunk = (chunks: React.ReactNode) => <Typography fontWeight=\"bold\">{chunks}</Typography>;\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocaleActionModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface BulkLocaleActionModalProps {\n  rows: LocaleStatus[];\n  headers: {\n    label: string;\n    name: string;\n  }[];\n  localesMetadata: Locale[];\n  validationErrors?: FormErrors;\n  action: 'bulk-publish' | 'bulk-unpublish';\n}\n\nconst BulkLocaleActionModal = ({\n  headers,\n  rows,\n  localesMetadata,\n  validationErrors = {},\n  action,\n}: BulkLocaleActionModalProps) => {\n  const { formatMessage } = useIntl();\n\n  const selectedRows = useTable<LocaleStatus[]>(\n    'BulkLocaleActionModal',\n    (state) => state.selectedRows\n  );\n\n  const getFormattedCountMessage = () => {\n    const currentStatusByLocale = rows.reduce<Record<string, string>>((acc, { locale, status }) => {\n      acc[locale] = status;\n      return acc;\n    }, {});\n    const localesWithErrors = Object.keys(validationErrors);\n\n    const publishedCount = selectedRows.filter(\n      ({ locale }) => currentStatusByLocale[locale] === 'published'\n    ).length;\n\n    const draftCount = selectedRows.filter(\n      ({ locale }) =>\n        (currentStatusByLocale[locale] === 'draft' ||\n          currentStatusByLocale[locale] === 'modified') &&\n        !localesWithErrors.includes(locale)\n    ).length;\n\n    const withErrorsCount = localesWithErrors.length;\n    const messageId =\n      action === 'bulk-publish'\n        ? 'content-manager.containers.list.selectedEntriesModal.selectedCount.publish'\n        : 'content-manager.containers.list.selectedEntriesModal.selectedCount.unpublish';\n\n    const defaultMessage =\n      action === 'bulk-publish'\n        ? '<b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} already published. <b>{draftCount}</b> {draftCount, plural, =0 {entries} one {entry} other {entries}} ready to publish. <b>{withErrorsCount}</b> {withErrorsCount, plural, =0 {entries} one {entry} other {entries}} waiting for action.'\n        : '<b>{draftCount}</b> {draftCount, plural, =0 {entries} one {entry} other {entries}} already unpublished. <b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} ready to unpublish.';\n\n    return formatMessage(\n      {\n        id: messageId,\n        defaultMessage,\n      },\n      {\n        withErrorsCount,\n        draftCount,\n        publishedCount,\n        b: BoldChunk,\n      }\n    );\n  };\n\n  return (\n    <Modal.Body>\n      <Typography>{getFormattedCountMessage()}</Typography>\n      <Box marginTop={5}>\n        <Table.Content>\n          <Table.Head>\n            <Table.HeaderCheckboxCell />\n            {headers.map((head) => (\n              <Table.HeaderCell key={head.name} {...head} />\n            ))}\n          </Table.Head>\n          <Table.Body>\n            {rows.map(({ locale, status }, index) => {\n              const error = validationErrors?.[locale] ?? null;\n\n              const statusVariant =\n                status === 'draft' ? 'primary' : status === 'published' ? 'success' : 'alternative';\n\n              return (\n                <Table.Row key={index}>\n                  <Table.CheckboxCell id={locale} aria-label={`Select ${locale}`} />\n                  <Table.Cell>\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {Array.isArray(localesMetadata)\n                        ? localesMetadata.find((localeEntry) => localeEntry.code === locale)?.name\n                        : locale}\n                    </Typography>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Box display=\"flex\">\n                      <Status\n                        display=\"flex\"\n                        paddingLeft=\"6px\"\n                        paddingRight=\"6px\"\n                        paddingTop=\"2px\"\n                        paddingBottom=\"2px\"\n                        size={'S'}\n                        variant={statusVariant}\n                      >\n                        <Typography tag=\"span\" variant=\"pi\" fontWeight=\"bold\">\n                          {capitalize(status)}\n                        </Typography>\n                      </Status>\n                    </Box>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <EntryValidationText validationErrors={error} status={status} action={action} />\n                  </Table.Cell>\n                  <Table.Cell>\n                    <IconButton\n                      tag={Link}\n                      to={{\n                        search: stringify({ plugins: { i18n: { locale } } }),\n                      }}\n                      label={formatMessage(\n                        {\n                          id: getTranslation('Settings.list.actions.edit'),\n                          defaultMessage: 'Edit {name} locale',\n                        },\n                        {\n                          name: locale,\n                        }\n                      )}\n                      variant=\"ghost\"\n                    >\n                      <Pencil />\n                    </IconButton>\n                  </Table.Cell>\n                </Table.Row>\n              );\n            })}\n          </Table.Body>\n        </Table.Content>\n      </Box>\n    </Modal.Body>\n  );\n};\n\nexport { BulkLocaleActionModal };\nexport type { BulkLocaleActionModalProps };\n", "import * as React from 'react';\n\nimport { skipToken } from '@reduxjs/toolkit/query';\nimport {\n  useNotification,\n  useQueryParams,\n  Table,\n  useAPIErrorHandler,\n  FormErrors,\n  useForm,\n} from '@strapi/admin/strapi-admin';\nimport {\n  type DocumentActionComponent,\n  type DocumentActionProps,\n  unstable_useDocument as useDocument,\n  unstable_useDocumentActions as useDocumentActions,\n  buildValidParams,\n  HeaderActionProps,\n} from '@strapi/content-manager/strapi-admin';\nimport {\n  Flex,\n  Status,\n  Typography,\n  Button,\n  Modal,\n  Field,\n  SingleSelect,\n  SingleSelectOption,\n  Dialog,\n  type StatusVariant,\n} from '@strapi/design-system';\nimport { WarningCircle, ListPlus, Trash, Download, Cross, Plus } from '@strapi/icons';\nimport { Modules } from '@strapi/types';\nimport { useIntl } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useI18n } from '../hooks/useI18n';\nimport { useGetLocalesQuery } from '../services/locales';\nimport { useGetManyDraftRelationCountQuery } from '../services/relations';\nimport { cleanData } from '../utils/clean';\nimport { getTranslation } from '../utils/getTranslation';\nimport { capitalize } from '../utils/strings';\n\nimport { BulkLocaleActionModal } from './BulkLocaleActionModal';\n\nimport type { Locale } from '../../../shared/contracts/locales';\nimport type { I18nBaseQuery } from '../types';\n\n/* -------------------------------------------------------------------------------------------------\n * LocalePickerAction\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LocaleOptionProps {\n  isDraftAndPublishEnabled: boolean;\n  locale: Locale;\n  status: 'draft' | 'published' | 'modified';\n  entryExists: boolean;\n}\n\nconst statusVariants: Record<LocaleOptionProps['status'], StatusVariant> = {\n  draft: 'secondary',\n  published: 'success',\n  modified: 'alternative',\n};\n\nconst LocaleOption = ({\n  isDraftAndPublishEnabled,\n  locale,\n  status,\n  entryExists,\n}: LocaleOptionProps) => {\n  const { formatMessage } = useIntl();\n\n  if (!entryExists) {\n    return formatMessage(\n      {\n        id: getTranslation('CMEditViewLocalePicker.locale.create'),\n        defaultMessage: 'Create <bold>{locale}</bold> locale',\n      },\n      {\n        bold: (locale: React.ReactNode) => <b>{locale}</b>,\n        locale: locale.name,\n      }\n    );\n  }\n\n  return (\n    <Flex width=\"100%\" gap={1} justifyContent=\"space-between\">\n      <Typography>{locale.name}</Typography>\n      {isDraftAndPublishEnabled ? (\n        <Status\n          display=\"flex\"\n          paddingLeft=\"6px\"\n          paddingRight=\"6px\"\n          paddingTop=\"2px\"\n          paddingBottom=\"2px\"\n          size=\"S\"\n          variant={statusVariants[status]}\n        >\n          <Typography tag=\"span\" variant=\"pi\" fontWeight=\"bold\">\n            {capitalize(status)}\n          </Typography>\n        </Status>\n      ) : null}\n    </Flex>\n  );\n};\n\nconst LocalePickerAction = ({\n  document,\n  meta,\n  model,\n  collectionType,\n  documentId,\n}: HeaderActionProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<I18nBaseQuery>();\n  const { hasI18n, canCreate, canRead } = useI18n();\n  const { data: locales = [] } = useGetLocalesQuery();\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\n  const { schema } = useDocument({\n    model,\n    collectionType,\n    documentId,\n    params: { locale: currentDesiredLocale },\n  });\n\n  const handleSelect = React.useCallback(\n    (value: string) => {\n      setQuery({\n        plugins: {\n          ...query.plugins,\n          i18n: {\n            locale: value,\n          },\n        },\n      });\n    },\n    [query.plugins, setQuery]\n  );\n\n  React.useEffect(() => {\n    if (!Array.isArray(locales) || !hasI18n) {\n      return;\n    }\n    /**\n     * Handle the case where the current locale query param doesn't exist\n     * in the list of available locales, so we redirect to the default locale.\n     */\n    const doesLocaleExist = locales.find((loc) => loc.code === currentDesiredLocale);\n    const defaultLocale = locales.find((locale) => locale.isDefault);\n    if (!doesLocaleExist && defaultLocale?.code) {\n      handleSelect(defaultLocale.code);\n    }\n  }, [handleSelect, hasI18n, locales, currentDesiredLocale]);\n\n  const currentLocale = Array.isArray(locales)\n    ? locales.find((locale) => locale.code === currentDesiredLocale)\n    : undefined;\n\n  const allCurrentLocales = [\n    { status: getDocumentStatus(document, meta), locale: currentLocale?.code },\n    ...(meta?.availableLocales ?? []),\n  ];\n\n  if (!hasI18n || !Array.isArray(locales) || locales.length === 0) {\n    return null;\n  }\n\n  return {\n    label: formatMessage({\n      id: getTranslation('Settings.locales.modal.locales.label'),\n      defaultMessage: 'Locales',\n    }),\n    options: locales.map((locale) => {\n      const entryWithLocaleExists = allCurrentLocales.some((doc) => doc.locale === locale.code);\n\n      const currentLocaleDoc = allCurrentLocales.find((doc) =>\n        'locale' in doc ? doc.locale === locale.code : false\n      );\n\n      const permissionsToCheck = currentLocaleDoc ? canRead : canCreate;\n\n      return {\n        disabled: !permissionsToCheck.includes(locale.code),\n        value: locale.code,\n        label: (\n          <LocaleOption\n            isDraftAndPublishEnabled={!!schema?.options?.draftAndPublish}\n            locale={locale}\n            status={currentLocaleDoc?.status}\n            entryExists={entryWithLocaleExists}\n          />\n        ),\n        startIcon: !entryWithLocaleExists ? <Plus /> : null,\n      };\n    }),\n    customizeContent: () => currentLocale?.name,\n    onSelect: handleSelect,\n    value: currentLocale,\n  };\n};\n\ntype UseDocument = typeof useDocument;\n\nconst getDocumentStatus = (\n  document: ReturnType<UseDocument>['document'],\n  meta: ReturnType<UseDocument>['meta']\n): 'draft' | 'published' | 'modified' => {\n  const docStatus = document?.status;\n  const statuses = meta?.availableStatus ?? [];\n\n  /**\n   * Creating an entry\n   */\n  if (!docStatus) {\n    return 'draft';\n  }\n\n  /**\n   * We're viewing a draft, but the document could have a published version\n   */\n  if (docStatus === 'draft' && statuses.find((doc) => doc.publishedAt !== null)) {\n    return 'published';\n  }\n\n  return docStatus;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * FillFromAnotherLocaleAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst FillFromAnotherLocaleAction = ({\n  documentId,\n  meta,\n  model,\n  collectionType,\n}: HeaderActionProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }] = useQueryParams<I18nBaseQuery>();\n  const { hasI18n } = useI18n();\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\n  const [localeSelected, setLocaleSelected] = React.useState<string | null>(null);\n  const setValues = useForm('FillFromAnotherLocale', (state) => state.setValues);\n\n  const { getDocument } = useDocumentActions();\n  const { schema, components } = useDocument({\n    model,\n    documentId,\n    collectionType,\n    params: { locale: currentDesiredLocale },\n  });\n  const { data: locales = [] } = useGetLocalesQuery();\n\n  const availableLocales = Array.isArray(locales)\n    ? locales.filter((locale) => meta?.availableLocales.some((l) => l.locale === locale.code))\n    : [];\n\n  const fillFromLocale = (onClose: () => void) => async () => {\n    const response = await getDocument({\n      collectionType,\n      model,\n      documentId,\n      params: { locale: localeSelected },\n    });\n    if (!response || !schema) {\n      return;\n    }\n\n    const { data } = response;\n\n    const cleanedData = cleanData(data, schema, components);\n\n    setValues(cleanedData);\n\n    onClose();\n  };\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return {\n    type: 'icon',\n    icon: <Download />,\n    disabled: availableLocales.length === 0,\n    label: formatMessage({\n      id: getTranslation('CMEditViewCopyLocale.copy-text'),\n      defaultMessage: 'Fill in from another locale',\n    }),\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: getTranslation('CMEditViewCopyLocale.dialog.title'),\n        defaultMessage: 'Confirmation',\n      }),\n      content: ({ onClose }: { onClose: () => void }) => (\n        <>\n          <Dialog.Body>\n            <Flex direction=\"column\" gap={3}>\n              <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n              <Typography textAlign=\"center\">\n                {formatMessage({\n                  id: getTranslation('CMEditViewCopyLocale.dialog.body'),\n                  defaultMessage:\n                    'Your current content will be erased and filled by the content of the selected locale:',\n                })}\n              </Typography>\n              <Field.Root width=\"100%\">\n                <Field.Label>\n                  {formatMessage({\n                    id: getTranslation('CMEditViewCopyLocale.dialog.field.label'),\n                    defaultMessage: 'Locale',\n                  })}\n                </Field.Label>\n                <SingleSelect\n                  value={localeSelected}\n                  placeholder={formatMessage({\n                    id: getTranslation('CMEditViewCopyLocale.dialog.field.placeholder'),\n                    defaultMessage: 'Select one locale...',\n                  })}\n                  // @ts-expect-error – the DS will handle numbers, but we're not allowing the API.\n                  onChange={(value) => setLocaleSelected(value)}\n                >\n                  {availableLocales.map((locale) => (\n                    <SingleSelectOption key={locale.code} value={locale.code}>\n                      {locale.name}\n                    </SingleSelectOption>\n                  ))}\n                </SingleSelect>\n              </Field.Root>\n            </Flex>\n          </Dialog.Body>\n          <Dialog.Footer>\n            <Flex gap={2} width=\"100%\">\n              <Button flex=\"auto\" variant=\"tertiary\" onClick={onClose}>\n                {formatMessage({\n                  id: getTranslation('CMEditViewCopyLocale.cancel-text'),\n                  defaultMessage: 'No, cancel',\n                })}\n              </Button>\n              <Button flex=\"auto\" variant=\"success\" onClick={fillFromLocale(onClose)}>\n                {formatMessage({\n                  id: getTranslation('CMEditViewCopyLocale.submit-text'),\n                  defaultMessage: 'Yes, fill in',\n                })}\n              </Button>\n            </Flex>\n          </Dialog.Footer>\n        </>\n      ),\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DeleteLocaleAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst DeleteLocaleAction: DocumentActionComponent = ({\n  document,\n  documentId,\n  model,\n  collectionType,\n}) => {\n  const { formatMessage } = useIntl();\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { delete: deleteAction } = useDocumentActions();\n  const { hasI18n, canDelete } = useI18n();\n\n  // Get the current locale object, using the URL instead of document so it works while creating\n  const [{ query }] = useQueryParams<I18nBaseQuery>();\n  const { data: locales = [] } = useGetLocalesQuery();\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\n  const locale = !('error' in locales) && locales.find((loc) => loc.code === currentDesiredLocale);\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return {\n    disabled:\n      (document?.locale && !canDelete.includes(document.locale)) || !document || !document.id,\n    position: ['header', 'table-row'],\n    label: formatMessage(\n      {\n        id: getTranslation('actions.delete.label'),\n        defaultMessage: 'Delete entry ({locale})',\n      },\n      { locale: locale && locale.name }\n    ),\n    icon: <StyledTrash />,\n    variant: 'danger',\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: getTranslation('actions.delete.dialog.title'),\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" gap={2}>\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n            {formatMessage({\n              id: getTranslation('actions.delete.dialog.body'),\n              defaultMessage: 'Are you sure?',\n            })}\n          </Typography>\n        </Flex>\n      ),\n      onConfirm: async () => {\n        const unableToDelete =\n          // We are unable to delete a collection type without a document ID\n          // & unable to delete generally if there is no document locale\n          (collectionType !== 'single-types' && !documentId) || !document?.locale;\n\n        if (unableToDelete) {\n          console.error(\n            \"You're trying to delete a document without an id or locale, this is likely a bug with Strapi. Please open an issue.\"\n          );\n\n          toggleNotification({\n            message: formatMessage({\n              id: getTranslation('actions.delete.error'),\n              defaultMessage: 'An error occurred while trying to delete the document locale.',\n            }),\n            type: 'danger',\n          });\n\n          return;\n        }\n\n        const res = await deleteAction({\n          documentId,\n          model,\n          collectionType,\n          params: { locale: document.locale },\n        });\n\n        if (!('error' in res)) {\n          navigate({ pathname: `../${collectionType}/${model}` }, { replace: true });\n        }\n      },\n    },\n  };\n};\n\nexport type LocaleStatus = {\n  locale: string;\n  status: Modules.Documents.Params.PublicationStatus.Kind | 'modified';\n};\n\ninterface ExtendedDocumentActionProps extends DocumentActionProps {\n  action?: 'bulk-publish' | 'bulk-unpublish';\n}\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocaleAction\n *\n * This component is used to handle bulk publish and unpublish actions on locales.\n * -----------------------------------------------------------------------------------------------*/\n\nconst BulkLocaleAction: DocumentActionComponent = ({\n  document: baseDocument,\n  documentId,\n  model,\n  collectionType,\n  action,\n}: ExtendedDocumentActionProps) => {\n  const baseLocale = baseDocument?.locale ?? null;\n\n  const [{ query }] = useQueryParams<{ status: 'draft' | 'published' }>();\n\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const isOnPublishedTab = query.status === 'published';\n\n  const { formatMessage } = useIntl();\n  const { hasI18n, canPublish } = useI18n();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const [selectedRows, setSelectedRows] = React.useState<any[]>([]);\n  const [isDraftRelationConfirmationOpen, setIsDraftRelationConfirmationOpen] =\n    React.useState<boolean>(false);\n\n  const { publishMany: publishManyAction, unpublishMany: unpublishManyAction } =\n    useDocumentActions();\n\n  const {\n    document,\n    meta: documentMeta,\n    schema,\n    validate,\n  } = useDocument(\n    {\n      model,\n      collectionType,\n      documentId,\n      params: {\n        locale: baseLocale,\n      },\n    },\n    {\n      skip: !hasI18n || !baseLocale,\n    }\n  );\n\n  const { data: localesMetadata = [] } = useGetLocalesQuery(hasI18n ? undefined : skipToken);\n\n  const headers = [\n    {\n      label: formatMessage({\n        id: 'global.name',\n        defaultMessage: 'Name',\n      }),\n      name: 'name',\n    },\n    {\n      label: formatMessage({\n        id: getTranslation('CMEditViewBulkLocale.status'),\n        defaultMessage: 'Status',\n      }),\n      name: 'status',\n    },\n    {\n      label: formatMessage({\n        id: getTranslation('CMEditViewBulkLocale.publication-status'),\n        defaultMessage: 'Publication Status',\n      }),\n      name: 'publication-status',\n    },\n  ];\n\n  // Extract the rows for the bulk locale publish modal and any validation\n  // errors per locale\n  const [rows, validationErrors] = React.useMemo(() => {\n    if (!document || !documentMeta?.availableLocales) {\n      // If we don't have a document or available locales, we return empty rows\n      // and no validation errors\n      return [[], {}];\n    }\n\n    // Build the rows for the bulk locale publish modal by combining the current\n    // document with all the available locales from the document meta\n    const rowsFromMeta: LocaleStatus[] = documentMeta?.availableLocales.map((doc) => {\n      const { locale, status } = doc;\n\n      return { locale, status };\n    });\n\n    rowsFromMeta.unshift({\n      locale: document.locale,\n      status: document.status,\n    });\n\n    // Build the validation errors for each locale.\n    const allDocuments = [document, ...(documentMeta?.availableLocales ?? [])];\n    const errors = allDocuments.reduce<FormErrors>((errs, document) => {\n      if (!document) {\n        return errs;\n      }\n\n      // Validate each locale entry via the useDocument validate function and store any errors in a dictionary\n      const validation = validate(document as Modules.Documents.AnyDocument);\n      if (validation !== null) {\n        errs[document.locale] = validation;\n      }\n      return errs;\n    }, {});\n\n    return [rowsFromMeta, errors];\n  }, [document, documentMeta?.availableLocales, validate]);\n\n  const isBulkPublish = action === 'bulk-publish';\n  const localesForAction = selectedRows.reduce((acc: string[], selectedRow: LocaleStatus) => {\n    const isValidLocale =\n      // Validation errors are irrelevant if we are trying to unpublish\n      !isBulkPublish || !Object.keys(validationErrors).includes(selectedRow.locale);\n\n    const shouldAddLocale = isBulkPublish\n      ? selectedRow.status !== 'published' && isValidLocale\n      : selectedRow.status !== 'draft' && isValidLocale;\n\n    if (shouldAddLocale) {\n      acc.push(selectedRow.locale);\n    }\n\n    return acc;\n  }, []);\n\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\n  // see https://www.notion.so/strapi/Count-draft-relations-56901b492efb45ab90d42fe975b32bd8?pvs=4\n  const enableDraftRelationsCount = false;\n  const {\n    data: draftRelationsCount = 0,\n    isLoading: isDraftRelationsLoading,\n    error: isDraftRelationsError,\n  } = useGetManyDraftRelationCountQuery(\n    {\n      model,\n      documentIds: [documentId!],\n      locale: localesForAction,\n    },\n    {\n      skip: !enableDraftRelationsCount || !documentId || localesForAction.length === 0,\n    }\n  );\n\n  React.useEffect(() => {\n    if (isDraftRelationsError) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(isDraftRelationsError),\n      });\n    }\n  }, [isDraftRelationsError, toggleNotification, formatAPIError]);\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  if (!documentId) {\n    return null;\n  }\n\n  // This document action can be enabled given that draft and publish and i18n are\n  // enabled and we can publish the current locale.\n\n  const publish = async () => {\n    await publishManyAction({\n      model,\n      documentIds: [documentId],\n      params: {\n        ...params,\n        locale: localesForAction,\n      },\n    });\n\n    setSelectedRows([]);\n  };\n\n  const unpublish = async () => {\n    await unpublishManyAction({\n      model,\n      documentIds: [documentId],\n      params: {\n        ...params,\n        locale: localesForAction,\n      },\n    });\n\n    setSelectedRows([]);\n  };\n\n  const handleAction = async () => {\n    if (draftRelationsCount > 0) {\n      setIsDraftRelationConfirmationOpen(true);\n    } else if (isBulkPublish) {\n      await publish();\n    } else {\n      await unpublish();\n    }\n  };\n\n  if (isDraftRelationConfirmationOpen) {\n    return {\n      label: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      variant: 'danger',\n      dialog: {\n        onCancel: () => {\n          setIsDraftRelationConfirmationOpen(false);\n        },\n        onConfirm: async () => {\n          await publish();\n\n          setIsDraftRelationConfirmationOpen(false);\n        },\n        type: 'dialog',\n        title: formatMessage({\n          id: getTranslation('actions.publish.dialog.title'),\n          defaultMessage: 'Confirmation',\n        }),\n        content: (\n          <Flex direction=\"column\" alignItems=\"center\" gap={2}>\n            <WarningCircle width=\"2.4rem\" height=\"2.4rem\" fill=\"danger600\" />\n            <Typography textAlign=\"center\">\n              {formatMessage({\n                id: getTranslation('CMEditViewBulkLocale.draft-relation-warning'),\n                defaultMessage:\n                  'Some locales are related to draft entries. Publishing them could leave broken links in your app.',\n              })}\n            </Typography>\n            <Typography textAlign=\"center\">\n              {formatMessage({\n                id: getTranslation('CMEditViewBulkLocale.continue-confirmation'),\n                defaultMessage: 'Are you sure you want to continue?',\n              })}\n            </Typography>\n          </Flex>\n        ),\n      },\n    };\n  }\n\n  const hasPermission = selectedRows\n    .map(({ locale }) => locale)\n    .every((locale) => canPublish.includes(locale));\n\n  return {\n    label: formatMessage({\n      id: getTranslation(`CMEditViewBulkLocale.${isBulkPublish ? 'publish' : 'unpublish'}-title`),\n      defaultMessage: `${isBulkPublish ? 'Publish' : 'Unpublish'} Multiple Locales`,\n    }),\n    variant: isBulkPublish ? 'secondary' : 'danger',\n    icon: isBulkPublish ? <ListPlus /> : <Cross />,\n    disabled: isOnPublishedTab || canPublish.length === 0,\n    position: ['panel'],\n    dialog: {\n      type: 'modal',\n      title: formatMessage({\n        id: getTranslation(`CMEditViewBulkLocale.${isBulkPublish ? 'publish' : 'unpublish'}-title`),\n        defaultMessage: `${isBulkPublish ? 'Publish' : 'Unpublish'} Multiple Locales`,\n      }),\n      content: () => {\n        return (\n          <Table.Root\n            headers={headers}\n            rows={rows.map((row) => ({\n              ...row,\n              id: row.locale,\n            }))}\n            selectedRows={selectedRows}\n            onSelectedRowsChange={(tableSelectedRows) => setSelectedRows(tableSelectedRows)}\n          >\n            <BulkLocaleActionModal\n              validationErrors={validationErrors}\n              headers={headers}\n              rows={rows}\n              localesMetadata={localesMetadata as Locale[]}\n              action={action ?? 'bulk-publish'}\n            />\n          </Table.Root>\n        );\n      },\n      footer: () => (\n        <Modal.Footer justifyContent=\"flex-end\">\n          <Button\n            loading={isDraftRelationsLoading}\n            disabled={!hasPermission || localesForAction.length === 0}\n            variant=\"default\"\n            onClick={handleAction}\n          >\n            {formatMessage({\n              id: isBulkPublish ? 'app.utils.publish' : 'app.utils.unpublish',\n              defaultMessage: isBulkPublish ? 'Publish' : 'Unpublish',\n            })}\n          </Button>\n        </Modal.Footer>\n      ),\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocalePublishAction\n * -----------------------------------------------------------------------------------------------*/\nconst BulkLocalePublishAction: DocumentActionComponent = (props: ExtendedDocumentActionProps) => {\n  return BulkLocaleAction({ action: 'bulk-publish', ...props });\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocaleUnpublishAction\n * -----------------------------------------------------------------------------------------------*/\nconst BulkLocaleUnpublishAction: DocumentActionComponent = (props: ExtendedDocumentActionProps) => {\n  return BulkLocaleAction({ action: 'bulk-unpublish', ...props });\n};\n\n/**\n * Because the icon system is completely broken, we have to do\n * this to remove the fill from the cog.\n */\nconst StyledTrash = styled(Trash)`\n  path {\n    fill: currentColor;\n  }\n`;\n\nexport {\n  BulkLocalePublishAction,\n  BulkLocaleUnpublishAction,\n  DeleteLocaleAction,\n  LocalePickerAction,\n  FillFromAnotherLocaleAction,\n};\n", "import * as React from 'react';\n\nimport { Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useI18n } from '../hooks/useI18n';\nimport { getTranslation } from '../utils/getTranslation';\n\nconst Emphasis = (chunks: React.ReactNode) => {\n  return (\n    <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\n      {chunks}\n    </Typography>\n  );\n};\n\nconst DeleteModalAdditionalInfo = () => {\n  const { hasI18n } = useI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTranslation('Settings.list.actions.deleteAdditionalInfos'),\n          defaultMessage:\n            'This will delete the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nconst PublishModalAdditionalInfo = () => {\n  const { hasI18n } = useI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTranslation('Settings.list.actions.publishAdditionalInfos'),\n          defaultMessage:\n            'This will publish the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nconst UnpublishModalAdditionalInfo = () => {\n  const { hasI18n } = useI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTranslation('Settings.list.actions.unpublishAdditionalInfos'),\n          defaultMessage:\n            'This will unpublish the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nexport { DeleteModalAdditionalInfo, PublishModalAdditionalInfo, UnpublishModalAdditionalInfo };\n", "import * as React from 'react';\n\nimport { useQueryParams } from '@strapi/admin/strapi-admin';\nimport { SingleSelect, SingleSelectOption } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useI18n } from '../hooks/useI18n';\nimport { useGetLocalesQuery } from '../services/locales';\nimport { getTranslation } from '../utils/getTranslation';\n\nimport type { I18nBaseQuery } from '../types';\n\ninterface Query extends I18nBaseQuery {\n  page?: number;\n}\n\nconst LocalePicker = () => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<Query>();\n\n  const { hasI18n, canRead, canCreate } = useI18n();\n  const { data: locales = [] } = useGetLocalesQuery(undefined, {\n    skip: !hasI18n,\n  });\n\n  const handleChange = React.useCallback(\n    (code: string, replace = false) => {\n      setQuery(\n        {\n          page: 1,\n          plugins: { ...query.plugins, i18n: { locale: code } },\n        },\n        'push',\n        replace\n      );\n    },\n    [query.plugins, setQuery]\n  );\n\n  React.useEffect(() => {\n    if (!Array.isArray(locales) || !hasI18n) {\n      return;\n    }\n    /**\n     * Handle the case where the current locale query param doesn't exist\n     * in the list of available locales, so we redirect to the default locale.\n     */\n    const currentDesiredLocale = query.plugins?.i18n?.locale;\n    const doesLocaleExist = locales.find((loc) => loc.code === currentDesiredLocale);\n    const defaultLocale = locales.find((locale) => locale.isDefault);\n    if (!doesLocaleExist && defaultLocale?.code) {\n      handleChange(defaultLocale.code, true);\n    }\n  }, [hasI18n, handleChange, locales, query.plugins?.i18n?.locale]);\n\n  if (!hasI18n || !Array.isArray(locales) || locales.length === 0) {\n    return null;\n  }\n\n  const displayedLocales = locales.filter((locale) => {\n    /**\n     * If you can create or read we allow you to see the locale exists\n     * this is because in the ListView, you may be able to create a new entry\n     * in a locale you can't read.\n     */\n    return canCreate.includes(locale.code) || canRead.includes(locale.code);\n  });\n\n  return (\n    <SingleSelect\n      size=\"S\"\n      aria-label={formatMessage({\n        id: getTranslation('actions.select-locale'),\n        defaultMessage: 'Select locale',\n      })}\n      value={query.plugins?.i18n?.locale || locales.find((locale) => locale.isDefault)?.code}\n      // @ts-expect-error – This can be removed in V2 of the DS.\n      onChange={handleChange}\n    >\n      {displayedLocales.map((locale) => (\n        <SingleSelectOption key={locale.id} value={locale.code}>\n          {locale.name}\n        </SingleSelectOption>\n      ))}\n    </SingleSelect>\n  );\n};\n\nexport { LocalePicker };\n", "export const PERMISSIONS = {\n  accessMain: [{ action: 'plugin::i18n.locale.read', subject: null }],\n  create: [{ action: 'plugin::i18n.locale.create', subject: null }],\n  delete: [{ action: 'plugin::i18n.locale.delete', subject: null }],\n  update: [{ action: 'plugin::i18n.locale.update', subject: null }],\n  read: [{ action: 'plugin::i18n.locale.read', subject: null }],\n};\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport { Flex, VisuallyHidden } from '@strapi/design-system';\nimport { Earth, EarthStriked } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { getTranslation } from '../utils/getTranslation';\n\nimport type { EditFieldLayout, EditLayout } from '@strapi/content-manager/strapi-admin';\n\ninterface MutateEditViewArgs {\n  layout: EditLayout;\n}\n\nconst mutateEditViewHook = ({ layout }: MutateEditViewArgs): MutateEditViewArgs => {\n  // If i18n isn't explicitly enabled on the content type, then no field can be localized\n  if (\n    !('i18n' in layout.options) ||\n    (typeof layout.options.i18n === 'object' &&\n      layout.options.i18n !== null &&\n      'localized' in layout.options.i18n &&\n      !layout.options.i18n.localized)\n  ) {\n    return { layout };\n  }\n\n  const components = Object.entries(layout.components).reduce<EditLayout['components']>(\n    (acc, [key, componentLayout]) => {\n      return {\n        ...acc,\n        [key]: {\n          ...componentLayout,\n          layout: componentLayout.layout.map((row) => row.map(addLabelActionToField)),\n        },\n      };\n    },\n    {}\n  );\n\n  return {\n    layout: {\n      ...layout,\n      components,\n      layout: layout.layout.map((panel) => panel.map((row) => row.map(addLabelActionToField))),\n    },\n  } satisfies Pick<MutateEditViewArgs, 'layout'>;\n};\n\nconst addLabelActionToField = (field: EditFieldLayout) => {\n  const isFieldLocalized = doesFieldHaveI18nPluginOpt(field.attribute.pluginOptions)\n    ? field.attribute.pluginOptions.i18n.localized\n    : true || ['uid', 'relation'].includes(field.attribute.type);\n\n  const labelActionProps = {\n    title: {\n      id: isFieldLocalized\n        ? getTranslation('Field.localized')\n        : getTranslation('Field.not-localized'),\n      defaultMessage: isFieldLocalized\n        ? 'This value is unique for the selected locale'\n        : 'This value is the same across all locales',\n    },\n    icon: isFieldLocalized ? <Earth /> : <EarthStriked />,\n  };\n\n  return {\n    ...field,\n    labelAction: <LabelAction {...labelActionProps} />,\n  };\n};\n\nconst doesFieldHaveI18nPluginOpt = (\n  pluginOpts?: object\n): pluginOpts is { i18n: { localized: boolean } } => {\n  if (!pluginOpts) {\n    return false;\n  }\n\n  return (\n    'i18n' in pluginOpts &&\n    typeof pluginOpts.i18n === 'object' &&\n    pluginOpts.i18n !== null &&\n    'localized' in pluginOpts.i18n\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LabelAction\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LabelActionProps {\n  title: MessageDescriptor;\n  icon: React.ReactNode;\n}\n\nconst LabelAction = ({ title, icon }: LabelActionProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Span tag=\"span\">\n      <VisuallyHidden tag=\"span\">{formatMessage(title)}</VisuallyHidden>\n      {React.cloneElement(icon as React.ReactElement, {\n        'aria-hidden': true,\n        focusable: false, // See: https://allyjs.io/tutorials/focusing-in-svg.html#making-svg-elements-focusable\n      })}\n    </Span>\n  );\n};\n\nconst Span = styled(Flex)`\n  svg {\n    width: 12px;\n    height: 12px;\n\n    fill: ${({ theme }) => theme.colors.neutral500};\n\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n`;\n\nexport { mutateEditViewHook };\n", "import { unstable_useDocument as useDocument } from '@strapi/content-manager/strapi-admin';\nimport { Box, Flex, Popover, Typography, useCollator, Button } from '@strapi/design-system';\nimport { CaretDown } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { Locale } from '../../../shared/contracts/locales';\nimport { useGetLocalesQuery } from '../services/locales';\n\ninterface LocaleListCellProps {\n  documentId: string;\n  collectionType: string;\n  locale: string;\n  model: string;\n}\n\nconst LocaleListCell = ({\n  documentId,\n  locale: currentLocale,\n  collectionType,\n  model,\n}: LocaleListCellProps) => {\n  // TODO: avoid loading availableLocales for each row but get that from the BE\n  const { meta, isLoading } = useDocument({\n    documentId,\n    collectionType,\n    model,\n    params: {\n      locale: currentLocale,\n    },\n  });\n\n  const { locale: language } = useIntl();\n  const { data: locales = [] } = useGetLocalesQuery();\n  const formatter = useCollator(language, {\n    sensitivity: 'base',\n  });\n\n  if (!Array.isArray(locales) || isLoading) {\n    return null;\n  }\n\n  const availableLocales = meta?.availableLocales.map((doc) => doc.locale) ?? [];\n  const localesForDocument = locales\n    .reduce<Locale[]>((acc, locale) => {\n      const createdLocale = [currentLocale, ...availableLocales].find((loc) => {\n        return loc === locale.code;\n      });\n\n      if (createdLocale) {\n        acc.push(locale);\n      }\n\n      return acc;\n    }, [])\n    .map((locale) => {\n      if (locale.isDefault) {\n        return `${locale.name} (default)`;\n      }\n\n      return locale.name;\n    })\n    .toSorted((a, b) => formatter.compare(a, b));\n\n  return (\n    <Popover.Root>\n      <Popover.Trigger>\n        <Button variant=\"ghost\" type=\"button\" onClick={(e) => e.stopPropagation()}>\n          <Flex minWidth=\"100%\" alignItems=\"center\" justifyContent=\"center\" fontWeight=\"regular\">\n            <Typography textColor=\"neutral800\" ellipsis marginRight={2}>\n              {localesForDocument.join(', ')}\n            </Typography>\n            <Flex>\n              <CaretDown width=\"1.2rem\" height=\"1.2rem\" />\n            </Flex>\n          </Flex>\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content sideOffset={16}>\n        <ul>\n          {localesForDocument.map((name) => (\n            <Box key={name} padding={3} tag=\"li\">\n              <Typography>{name}</Typography>\n            </Box>\n          ))}\n        </ul>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n\nexport { LocaleListCell };\nexport type { LocaleListCellProps };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport { LocaleListCell } from '../components/LocaleListCell';\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\nimport { getTranslation } from '../utils/getTranslation';\n\nimport type { ListFieldLayout, ListLayout } from '@strapi/content-manager/strapi-admin';\n\n/* -------------------------------------------------------------------------------------------------\n * addColumnToTableHook\n * -----------------------------------------------------------------------------------------------*/\ninterface AddColumnToTableHookArgs {\n  layout: ListLayout;\n  displayedHeaders: ListFieldLayout[];\n}\n\nconst addColumnToTableHook = ({ displayedHeaders, layout }: AddColumnToTableHookArgs) => {\n  const { options } = layout;\n\n  const isFieldLocalized = doesPluginOptionsHaveI18nLocalized(options)\n    ? options.i18n.localized\n    : false;\n\n  if (!isFieldLocalized) {\n    return { displayedHeaders, layout };\n  }\n\n  return {\n    displayedHeaders: [\n      ...displayedHeaders,\n      {\n        attribute: { type: 'string' },\n        label: {\n          id: getTranslation('list-view.table.header.label'),\n          defaultMessage: 'Available in',\n        },\n        searchable: false,\n        sortable: false,\n        name: 'locales',\n        // @ts-expect-error – ID is seen as number | string; this will change when we move the type over.\n        cellFormatter: (props, _header, meta) => <LocaleListCell {...props} {...meta} />,\n      },\n    ],\n    layout,\n  };\n};\n\nexport { addColumnToTableHook };\n", "import { Schema } from '@strapi/types';\n/* -------------------------------------------------------------------------------------------------\n * addLocaleToReleasesHook\n * -----------------------------------------------------------------------------------------------*/\ninterface AddLocaleToReleasesHookArgs {\n  displayedHeaders: {\n    key: string;\n    fieldSchema: Schema.Attribute.Kind | 'custom';\n    metadatas: {\n      label: { id: string; defaultMessage: string };\n      searchable: boolean;\n      sortable: boolean;\n    };\n    name: string;\n  }[];\n  hasI18nEnabled: boolean;\n}\n\nconst addLocaleToReleasesHook = ({ displayedHeaders = [] }: AddLocaleToReleasesHookArgs) => {\n  return {\n    displayedHeaders: [\n      ...displayedHeaders,\n      {\n        label: {\n          id: 'content-releases.page.ReleaseDetails.table.header.label.locale',\n          defaultMessage: 'locale',\n        },\n        name: 'locale',\n      },\n    ],\n    hasI18nEnabled: true,\n  };\n};\n\nexport { addLocaleToReleasesHook };\n", "import get from 'lodash/get';\n\nimport type { Middleware } from '@reduxjs/toolkit';\nimport type { Store } from '@strapi/admin/strapi-admin';\n\nconst extendCTBAttributeInitialDataMiddleware: () => Middleware<\n  object,\n  ReturnType<Store['getState']>\n> = () => {\n  return ({ getState }) =>\n    (next) =>\n    (action) => {\n      const enhanceAction = () => {\n        // the block here is to catch the error when trying to access the state\n        // of the ctb when the plugin is not mounted\n        try {\n          const store = getState();\n\n          const hasi18nEnabled = get(\n            store,\n            [\n              'content-type-builder_dataManagerProvider',\n              'modifiedData',\n              'contentType',\n              'schema',\n              'pluginOptions',\n              'i18n',\n              'localized',\n            ],\n            false\n          );\n\n          if (hasi18nEnabled) {\n            const pluginOptions = action.options\n              ? { ...action.options.pluginOptions, i18n: { localized: true } }\n              : { i18n: { localized: true } };\n\n            return next({\n              ...action,\n              options: {\n                pluginOptions,\n              },\n            });\n          }\n\n          return next(action);\n        } catch (err) {\n          return next(action);\n        }\n      };\n\n      if (\n        action.type === 'ContentTypeBuilder/FormModal/SET_ATTRIBUTE_DATA_SCHEMA' &&\n        action.forTarget === 'contentType' &&\n        !['relation', 'component'].includes(action.attributeType) &&\n        !action.isEditing\n      ) {\n        return enhanceAction();\n      }\n\n      if (\n        action.type === 'ContentTypeBuilder/FormModal/SET_CUSTOM_FIELD_DATA_SCHEMA' &&\n        action.forTarget === 'contentType' &&\n        !action.isEditing\n      ) {\n        return enhanceAction();\n      }\n\n      if (\n        (action.type ===\n          'ContentTypeBuilder/FormModal/RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO' ||\n          action.type === 'ContentTypeBuilder/FormModal/RESET_PROPS_AND_SAVE_CURRENT_DATA') &&\n        action.forTarget === 'contentType'\n      ) {\n        return enhanceAction();\n      }\n\n      return next(action);\n    };\n};\n\nexport { extendCTBAttributeInitialDataMiddleware };\n", "import type { Middleware } from '@reduxjs/toolkit';\nimport type { Store } from '@strapi/admin/strapi-admin';\n\nconst extendCTBInitialDataMiddleware: () => Middleware<\n  object,\n  ReturnType<Store['getState']>\n> = () => {\n  return () => (next) => (action) => {\n    if (\n      action.type === 'ContentTypeBuilder/FormModal/SET_DATA_TO_EDIT' &&\n      action.modalType === 'contentType'\n    ) {\n      const i18n = { localized: false };\n\n      const pluginOptions = action.data.pluginOptions\n        ? { ...action.data.pluginOptions, i18n }\n        : { i18n };\n\n      const data = { ...action.data, pluginOptions };\n\n      if (action.actionType === 'create') {\n        return next({ ...action, data });\n      }\n\n      // Override the action if the pluginOption config does not contain i18n\n      // In this case we need to set the proper initialData shape\n      if (!action.data.pluginOptions?.i18n?.localized) {\n        return next({ ...action, data });\n      }\n    }\n\n    // action is not the one we want to override\n    return next(action);\n  };\n};\n\nexport { extendCTBInitialDataMiddleware };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as qs from 'qs';\nimport { matchPath } from 'react-router-dom';\n\nimport type { RBACMiddleware } from '@strapi/admin/strapi-admin';\n\nconst localeMiddleware: RBACMiddleware = (ctx) => (next) => (permissions) => {\n  const match = matchPath('/content-manager/:collectionType/:model?/:id', ctx.pathname);\n\n  if (!match) {\n    return next(permissions);\n  }\n\n  const search = qs.parse(ctx.search);\n\n  if (typeof search !== 'object') {\n    return next(permissions);\n  }\n\n  if (!('plugins' in search && typeof search.plugins === 'object')) {\n    return next(permissions);\n  }\n\n  if (\n    !(\n      'i18n' in search.plugins &&\n      typeof search.plugins.i18n === 'object' &&\n      !Array.isArray(search.plugins.i18n)\n    )\n  ) {\n    return next(permissions);\n  }\n\n  const { locale } = search.plugins.i18n;\n\n  if (typeof locale !== 'string') {\n    return next(permissions);\n  }\n\n  const revisedPermissions = permissions.filter(\n    (permission) =>\n      !permission.properties?.locales || permission.properties.locales.includes(locale)\n  );\n\n  return next(revisedPermissions);\n};\n\nexport { localeMiddleware };\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nexport { prefixPluginTranslations };\n", "import omit from 'lodash/omit';\n\nimport { LOCALIZED_FIELDS, doesPluginOptionsHaveI18nLocalized } from './fields';\n\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * mutateCTBContentTypeSchema\n * -----------------------------------------------------------------------------------------------*/\n\nconst mutateCTBContentTypeSchema = (\n  nextSchema: Schema.ContentType,\n  prevSchema?: {\n    apiID?: string;\n    schema?: Schema.ContentType;\n    uid?: string;\n  }\n) => {\n  // Don't perform mutations components\n  if (!doesPluginOptionsHaveI18nLocalized(nextSchema.pluginOptions)) {\n    return nextSchema;\n  }\n\n  const isNextSchemaLocalized = nextSchema.pluginOptions.i18n.localized;\n  const isPrevSchemaLocalized = doesPluginOptionsHaveI18nLocalized(\n    prevSchema?.schema?.pluginOptions\n  )\n    ? prevSchema?.schema?.pluginOptions.i18n.localized\n    : false;\n\n  // No need to perform modification on the schema, if the i18n feature was not changed\n  // at the ct level\n  if (isNextSchemaLocalized && isPrevSchemaLocalized) {\n    return nextSchema;\n  }\n\n  if (isNextSchemaLocalized) {\n    const attributes = addLocalisationToFields(nextSchema.attributes);\n\n    return { ...nextSchema, attributes };\n  }\n\n  // Remove the i18n object from the pluginOptions\n  if (!isNextSchemaLocalized) {\n    const pluginOptions = omit(nextSchema.pluginOptions, 'i18n');\n    const attributes = disableAttributesLocalisation(nextSchema.attributes);\n\n    return { ...nextSchema, pluginOptions, attributes };\n  }\n\n  return nextSchema;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * addLocalisationToFields\n * -----------------------------------------------------------------------------------------------*/\n\nconst addLocalisationToFields = (attributes: Schema.ContentType['attributes']) =>\n  Object.keys(attributes).reduce<Schema.ContentType['attributes']>((acc, current) => {\n    const currentAttribute = attributes[current];\n\n    if (LOCALIZED_FIELDS.includes(currentAttribute.type)) {\n      const i18n = { localized: true };\n\n      const pluginOptions = currentAttribute.pluginOptions\n        ? { ...currentAttribute.pluginOptions, i18n }\n        : { i18n };\n\n      acc[current] = { ...currentAttribute, pluginOptions };\n\n      return acc;\n    }\n\n    acc[current] = currentAttribute;\n\n    return acc;\n  }, {});\n\n/* -------------------------------------------------------------------------------------------------\n * disableAttributesLocalisation\n * -----------------------------------------------------------------------------------------------*/\n\ntype OmitByPath<T extends object, K extends string[]> = Pick<T, Exclude<keyof T, K[number]>>;\n\nconst disableAttributesLocalisation = (attributes: Schema.ContentType['attributes']) =>\n  Object.keys(attributes).reduce<\n    Record<string, OmitByPath<Schema.ContentType['attributes'][string], ['pluginOptions', 'i18n']>>\n  >((acc, current) => {\n    acc[current] = omit(attributes[current], 'pluginOptions.i18n');\n\n    return acc;\n  }, {});\n\nexport { mutateCTBContentTypeSchema };\n", "import get from 'lodash/get';\nimport * as yup from 'yup';\n\nimport { CheckboxConfirmation } from './components/CheckboxConfirmation';\nimport {\n  BulkLocalePublishAction,\n  BulkLocaleUnpublishAction,\n  DeleteLocaleAction,\n  LocalePickerAction,\n  FillFromAnotherLocaleAction,\n} from './components/CMHeaderActions';\nimport {\n  DeleteModalAdditionalInfo,\n  PublishModalAdditionalInfo,\n  UnpublishModalAdditionalInfo,\n} from './components/CMListViewModalsAdditionalInformation';\nimport { LocalePicker } from './components/LocalePicker';\nimport { PERMISSIONS } from './constants';\nimport { mutateEditViewHook } from './contentManagerHooks/editView';\nimport { addColumnToTableHook } from './contentManagerHooks/listView';\nimport { addLocaleToReleasesHook } from './contentReleasesHooks/releaseDetailsView';\nimport { extendCTBAttributeInitialDataMiddleware } from './middlewares/extendCTBAttributeInitialData';\nimport { extendCTBInitialDataMiddleware } from './middlewares/extendCTBInitialData';\nimport { localeMiddleware } from './middlewares/rbac-middleware';\nimport { pluginId } from './pluginId';\nimport { i18nApi } from './services/api';\nimport { LOCALIZED_FIELDS } from './utils/fields';\nimport { getTranslation } from './utils/getTranslation';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\nimport { mutateCTBContentTypeSchema } from './utils/schemas';\n\nimport type { DocumentActionComponent } from '@strapi/content-manager/strapi-admin';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  register(app: any) {\n    app.addMiddlewares([extendCTBAttributeInitialDataMiddleware, extendCTBInitialDataMiddleware]);\n    app.addMiddlewares([() => i18nApi.middleware]);\n    app.addReducers({\n      [i18nApi.reducerPath]: i18nApi.reducer,\n    });\n    app.addRBACMiddleware([localeMiddleware]);\n    app.registerPlugin({\n      id: pluginId,\n      name: pluginId,\n    });\n  },\n  bootstrap(app: any) {\n    // // Hook that adds a column into the CM's LV table\n    app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', addColumnToTableHook);\n    app.registerHook('Admin/CM/pages/EditView/mutate-edit-view-layout', mutateEditViewHook);\n    // Hooks that checks if the locale is present in the release\n    app.registerHook(\n      'ContentReleases/pages/ReleaseDetails/add-locale-in-releases',\n      addLocaleToReleasesHook\n    );\n\n    // Add the settings link\n    app.addSettingsLink('global', {\n      intlLabel: {\n        id: getTranslation('plugin.name'),\n        defaultMessage: 'Internationalization',\n      },\n      id: 'internationalization',\n      to: 'internationalization',\n      Component: () =>\n        import('./pages/SettingsPage').then((mod) => ({ default: mod.ProtectedSettingsPage })),\n      permissions: PERMISSIONS.accessMain,\n    });\n\n    const contentManager = app.getPlugin('content-manager');\n\n    contentManager.apis.addDocumentHeaderAction([LocalePickerAction, FillFromAnotherLocaleAction]);\n    contentManager.apis.addDocumentAction((actions: DocumentActionComponent[]) => {\n      const indexOfDeleteAction = actions.findIndex((action) => action.type === 'delete');\n      actions.splice(indexOfDeleteAction, 0, DeleteLocaleAction);\n      return actions;\n    });\n\n    contentManager.apis.addDocumentAction((actions: DocumentActionComponent[]) => {\n      // When enabled the bulk locale publish action should be the first action\n      // in 'More Document Actions' and therefore the third action in the array\n      actions.splice(2, 0, BulkLocalePublishAction);\n      actions.splice(5, 0, BulkLocaleUnpublishAction);\n      return actions;\n    });\n\n    contentManager.injectComponent('listView', 'actions', {\n      name: 'i18n-locale-filter',\n      Component: LocalePicker,\n    });\n\n    contentManager.injectComponent('listView', 'publishModalAdditionalInfos', {\n      name: 'i18n-publish-bullets-in-modal',\n      Component: PublishModalAdditionalInfo,\n    });\n\n    contentManager.injectComponent('listView', 'unpublishModalAdditionalInfos', {\n      name: 'i18n-unpublish-bullets-in-modal',\n      Component: UnpublishModalAdditionalInfo,\n    });\n\n    contentManager.injectComponent('listView', 'deleteModalAdditionalInfos', {\n      name: 'i18n-delete-bullets-in-modal',\n      Component: DeleteModalAdditionalInfo,\n    });\n\n    const ctbPlugin = app.getPlugin('content-type-builder');\n\n    if (ctbPlugin) {\n      const ctbFormsAPI = ctbPlugin.apis.forms;\n      ctbFormsAPI.addContentTypeSchemaMutation(mutateCTBContentTypeSchema);\n      ctbFormsAPI.components.add({ id: 'checkboxConfirmation', component: CheckboxConfirmation });\n\n      ctbFormsAPI.extendContentType({\n        validator: () => ({\n          i18n: yup.object().shape({\n            localized: yup.bool(),\n          }),\n        }),\n        form: {\n          advanced() {\n            return [\n              {\n                name: 'pluginOptions.i18n.localized',\n                description: {\n                  id: getTranslation('plugin.schema.i18n.localized.description-content-type'),\n                  defaultMessage: 'Allows translating an entry into different languages',\n                },\n                type: 'checkboxConfirmation',\n                intlLabel: {\n                  id: getTranslation('plugin.schema.i18n.localized.label-content-type'),\n                  defaultMessage: 'Localization',\n                },\n              },\n            ];\n          },\n        },\n      });\n\n      ctbFormsAPI.extendFields(LOCALIZED_FIELDS, {\n        validator: (args: any) => ({\n          i18n: yup.object().shape({\n            localized: yup.bool().test({\n              name: 'ensure-unique-localization',\n              message: getTranslation('plugin.schema.i18n.ensure-unique-localization'),\n              test(value) {\n                if (value === undefined || value) {\n                  return true;\n                }\n\n                const unique = get(args, ['3', 'modifiedData', 'unique'], null);\n\n                // Unique fields must be localized\n                if (unique && !value) {\n                  return false;\n                }\n\n                return true;\n              },\n            }),\n          }),\n        }),\n        form: {\n          advanced({ contentTypeSchema, forTarget, type, step }: any) {\n            if (forTarget !== 'contentType') {\n              return [];\n            }\n\n            const hasI18nEnabled = get(\n              contentTypeSchema,\n              ['schema', 'pluginOptions', 'i18n', 'localized'],\n              false\n            );\n\n            if (!hasI18nEnabled) {\n              return [];\n            }\n\n            if (type === 'component' && step === '1') {\n              return [];\n            }\n\n            return [\n              {\n                name: 'pluginOptions.i18n.localized',\n                description: {\n                  id: getTranslation('plugin.schema.i18n.localized.description-field'),\n                  defaultMessage: 'The field can have different values in each locale',\n                },\n                type: 'checkbox',\n                intlLabel: {\n                  id: getTranslation('plugin.schema.i18n.localized.label-field'),\n                  defaultMessage: 'Enable localization for this field',\n                },\n              },\n            ];\n          },\n        },\n      });\n    }\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n"],
  "mappings": "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",
  "names": ["value", "useDocument", "index", "locale", "_a", "useDocumentActions", "document", "_b", "get", "pluginId", "omit", "create"]
}
