import {
  useAdminRoles
} from "./chunk-4RVZVODY.js";
import {
  ContentBox,
  getBasename,
  useClipboard,
  useField
} from "./chunk-R4ZAF2WR.js";
import {
  useNotification
} from "./chunk-ISQY65LE.js";
import {
  Field,
  IconButton,
  MultiSelect,
  MultiSelectOption,
  useIntl
} from "./chunk-QEFB2FAM.js";
import {
  ForwardRef$2f,
  ForwardRef$3F
} from "./chunk-DICHSZ7M.js";
import {
  require_jsx_runtime
} from "./chunk-QBLEIVF7.js";
import {
  dt,
  mt
} from "./chunk-6VAEU2GM.js";
import {
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/@strapi/admin/dist/admin/SelectRoles-C1P9kRCc.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var MagicLinkWrapper = ({ children, target }) => {
  const { toggleNotification } = useNotification();
  const { formatMessage } = useIntl();
  const { copy } = useClipboard();
  const copyLabel = formatMessage({
    id: "app.component.CopyToClipboard.label",
    defaultMessage: "Copy to clipboard"
  });
  const handleClick = async (e) => {
    e.preventDefault();
    const didCopy = await copy(target);
    if (didCopy) {
      toggleNotification({
        type: "info",
        message: formatMessage({ id: "notification.link-copied" })
      });
    }
  };
  return (0, import_jsx_runtime.jsx)(
    ContentBox,
    {
      endAction: (0, import_jsx_runtime.jsx)(IconButton, { label: copyLabel, variant: "ghost", onClick: handleClick, children: (0, import_jsx_runtime.jsx)(ForwardRef$3F, {}) }),
      title: target,
      titleEllipsis: true,
      subtitle: children,
      icon: (0, import_jsx_runtime.jsx)("span", { style: { fontSize: 32 }, children: "✉️" }),
      iconBackground: "neutral100"
    }
  );
};
var MagicLinkCE = ({ registrationToken }) => {
  const { formatMessage } = useIntl();
  const target = `${window.location.origin}${getBasename()}/auth/register?registrationToken=${registrationToken}`;
  return (0, import_jsx_runtime.jsx)(MagicLinkWrapper, { target, children: formatMessage({
    id: "app.components.Users.MagicLink.connect",
    defaultMessage: "Copy and share this link to give access to this user"
  }) });
};
var SelectRoles = ({ disabled }) => {
  const { isLoading, roles } = useAdminRoles();
  const { formatMessage } = useIntl();
  const { value = [], onChange, error } = useField("roles");
  return (0, import_jsx_runtime.jsxs)(
    Field.Root,
    {
      error,
      hint: formatMessage({
        id: "app.components.Users.ModalCreateBody.block-title.roles.description",
        defaultMessage: "A user can have one or several roles"
      }),
      name: "roles",
      required: true,
      children: [
        (0, import_jsx_runtime.jsx)(Field.Label, { children: formatMessage({
          id: "app.components.Users.ModalCreateBody.block-title.roles",
          defaultMessage: "User's roles"
        }) }),
        (0, import_jsx_runtime.jsx)(
          MultiSelect,
          {
            disabled,
            onChange: (v) => {
              onChange("roles", v);
            },
            placeholder: formatMessage({
              id: "app.components.Select.placeholder",
              defaultMessage: "Select"
            }),
            startIcon: isLoading ? (0, import_jsx_runtime.jsx)(Loader, {}) : void 0,
            value: value.map((v) => v.toString()),
            withTags: true,
            children: roles.map((role) => {
              return (0, import_jsx_runtime.jsx)(MultiSelectOption, { value: role.id.toString(), children: formatMessage({
                id: `global.${role.code}`,
                defaultMessage: role.name
              }) }, role.id);
            })
          }
        ),
        (0, import_jsx_runtime.jsx)(Field.Error, {}),
        (0, import_jsx_runtime.jsx)(Field.Hint, {})
      ]
    }
  );
};
var rotation = mt`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(359deg);
  }
`;
var LoadingWrapper = dt.div`
  animation: ${rotation} 2s infinite linear;
`;
var Loader = () => (0, import_jsx_runtime.jsx)(LoadingWrapper, { children: (0, import_jsx_runtime.jsx)(ForwardRef$2f, {}) });

export {
  MagicLinkWrapper,
  MagicLinkCE,
  SelectRoles
};
//# sourceMappingURL=chunk-ISUZPEOW.js.map
