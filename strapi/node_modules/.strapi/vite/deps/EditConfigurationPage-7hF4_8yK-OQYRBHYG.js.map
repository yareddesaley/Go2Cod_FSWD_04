{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/pages/EditConfigurationPage.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Page, useNotification, useTracking, useAPIErrorHandler } from '@strapi/admin/strapi-admin';\nimport { useIntl } from 'react-intl';\n\nimport { TEMP_FIELD_NAME } from '../components/ConfigurationForm/Fields';\nimport { ConfigurationForm, ConfigurationFormProps } from '../components/ConfigurationForm/Form';\nimport { useDoc } from '../hooks/useDocument';\nimport { useDocLayout } from '../hooks/useDocumentLayout';\nimport { useTypedSelector } from '../modules/hooks';\nimport { useUpdateContentTypeConfigurationMutation } from '../services/contentTypes';\nimport { useGetInitialDataQuery } from '../services/init';\nimport { setIn } from '../utils/objects';\n\nimport type { Metadatas } from '../../../shared/contracts/content-types';\n\nconst EditConfigurationPage = () => {\n  const { trackUsage } = useTracking();\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const { isLoading: isLoadingSchema, schema, model } = useDoc();\n  const { isLoading: isLoadingLayout, error, list, edit } = useDocLayout();\n\n  const {\n    fieldSizes,\n    error: errorFieldSizes,\n    isLoading: isLoadingFieldSizes,\n    isFetching: isFetchingFieldSizes,\n  } = useGetInitialDataQuery(undefined, {\n    selectFromResult: (res) => {\n      const fieldSizes = Object.entries(res.data?.fieldSizes ?? {}).reduce<\n        ConfigurationFormProps['fieldSizes']\n      >((acc, [attributeName, { default: size }]) => {\n        acc[attributeName] = size;\n\n        return acc;\n      }, {});\n\n      return {\n        isFetching: res.isFetching,\n        isLoading: res.isLoading,\n        error: res.error,\n        fieldSizes,\n      };\n    },\n  });\n\n  React.useEffect(() => {\n    if (errorFieldSizes) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(errorFieldSizes),\n      });\n    }\n  }, [errorFieldSizes, formatAPIError, toggleNotification]);\n\n  const isLoading =\n    isLoadingSchema || isLoadingLayout || isLoadingFieldSizes || isFetchingFieldSizes;\n\n  const [updateConfiguration] = useUpdateContentTypeConfigurationMutation();\n  const handleSubmit: ConfigurationFormProps['onSubmit'] = async (data) => {\n    try {\n      trackUsage('willSaveContentTypeLayout');\n\n      /**\n       * We reconstruct the metadatas object by taking the existing list metadatas\n       * and re-merging that by attribute name with the current list metadatas, whilst overwriting\n       * the data from the form we've built.\n       */\n      const meta = Object.entries(list.metadatas).reduce<Metadatas>(\n        (acc, [name, { mainField: _mainField, ...listMeta }]) => {\n          const existingEditMeta = edit.metadatas[name];\n\n          const {\n            __temp_key__,\n            size: _size,\n            name: _name,\n            ...editedMetadata\n          } = data.layout.flatMap((row) => row.children).find((field) => field.name === name) ?? {};\n\n          acc[name] = {\n            edit: {\n              ...existingEditMeta,\n              ...editedMetadata,\n            },\n            list: listMeta,\n          };\n\n          return acc;\n        },\n        {}\n      );\n\n      const res = await updateConfiguration({\n        layouts: {\n          edit: data.layout.map((row) =>\n            row.children.reduce<Array<{ name: string; size: number }>>((acc, { name, size }) => {\n              if (name !== TEMP_FIELD_NAME) {\n                return [...acc, { name, size }];\n              }\n\n              return acc;\n            }, [])\n          ),\n          list: list.layout.map((field) => field.name),\n        },\n        settings: setIn(data.settings, 'displayName', undefined),\n        metadatas: meta,\n        uid: model,\n      });\n\n      if ('data' in res) {\n        trackUsage('didEditEditSettings');\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\n        });\n      } else {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n      }\n    } catch {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (errorFieldSizes || error || !schema) {\n    return <Page.Error />;\n  }\n\n  return (\n    <>\n      <Page.Title>{`Configure ${edit.settings.displayName} Edit View`}</Page.Title>\n      <ConfigurationForm\n        onSubmit={handleSubmit}\n        attributes={schema.attributes}\n        fieldSizes={fieldSizes}\n        layout={edit}\n      />\n    </>\n  );\n};\n\nconst ProtectedEditConfigurationPage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.contentManager?.collectionTypesConfigurations\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditConfigurationPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedEditConfigurationPage, EditConfigurationPage };\n"],
  "mappings": "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",
  "names": ["fieldSizes"]
}
